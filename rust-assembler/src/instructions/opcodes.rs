use phf::phf_map;

pub static OPCODES: phf::Map<&'static str, u32> = phf_map! {
    // 8-bit loads
    "ld a,b" => 0x78,
    "ld a,c" => 0x79,
    "ld a,d" => 0x7a,
    "ld a,e" => 0x7b,
    "ld a,h" => 0x7c,
    "ld a,l" => 0x7d,
    "ld a,(hl)" => 0x7e,
    "ld a,a" => 0x7f,
    "ld b,a" => 0x47,
    "ld c,a" => 0x4f,
    "ld d,a" => 0x57,
    "ld e,a" => 0x5f,
    "ld h,a" => 0x67,
    "ld l,a" => 0x6f,
    "ld (hl),a" => 0x77,
    "ld b,b" => 0x40,
    "ld b,c" => 0x41,
    "ld b,d" => 0x42,
    "ld b,e" => 0x43,
    "ld b,h" => 0x44,
    "ld b,l" => 0x45,
    "ld b,(hl)" => 0x46,
    "ld c,b" => 0x48,
    "ld c,c" => 0x49,
    "ld c,d" => 0x4a,
    "ld c,e" => 0x4b,
    "ld c,h" => 0x4c,
    "ld c,l" => 0x4d,
    "ld c,(hl)" => 0x4e,
    "ld d,b" => 0x50,
    "ld d,c" => 0x51,
    "ld d,d" => 0x52,
    "ld d,e" => 0x53,
    "ld d,h" => 0x54,
    "ld d,l" => 0x55,
    "ld d,(hl)" => 0x56,
    "ld e,b" => 0x58,
    "ld e,c" => 0x59,
    "ld e,d" => 0x5a,
    "ld e,e" => 0x5b,
    "ld e,h" => 0x5c,
    "ld e,l" => 0x5d,
    "ld e,(hl)" => 0x5e,
    "ld h,b" => 0x60,
    "ld h,c" => 0x61,
    "ld h,d" => 0x62,
    "ld h,e" => 0x63,
    "ld h,h" => 0x64,
    "ld h,l" => 0x65,
    "ld h,(hl)" => 0x66,
    "ld l,b" => 0x68,
    "ld l,c" => 0x69,
    "ld l,d" => 0x6a,
    "ld l,e" => 0x6b,
    "ld l,h" => 0x6c,
    "ld l,l" => 0x6d,
    "ld l,(hl)" => 0x6e,
    "ld (hl),b" => 0x70,
    "ld (hl),c" => 0x71,
    "ld (hl),d" => 0x72,
    "ld (hl),e" => 0x73,
    "ld (hl),h" => 0x74,
    "ld (hl),l" => 0x75,

    // Additional LD instructions
    "ld a,(bc)" => 0x0a,
    "ld a,(de)" => 0x1a,
    "ld (bc),a" => 0x02,
    "ld (de),a" => 0x12,

    // Basic instructions
    "nop" => 0x00,
    "halt" => 0x76,
    "ret" => 0xc9,
    "reti" => 0xed4d,
    "retn" => 0xed45,

    // Stack operations
    "push af" => 0xf5,
    "push bc" => 0xc5,
    "push de" => 0xd5,
    "push hl" => 0xe5,
    "pop af" => 0xf1,
    "pop bc" => 0xc1,
    "pop de" => 0xd1,
    "pop hl" => 0xe1,

    // Increment/Decrement
    "inc a" => 0x3c,
    "inc b" => 0x04,
    "inc c" => 0x0c,
    "inc d" => 0x14,
    "inc e" => 0x1c,
    "inc h" => 0x24,
    "inc l" => 0x2c,
    "inc (hl)" => 0x34,
    "inc bc" => 0x03,
    "inc de" => 0x13,
    "inc hl" => 0x23,
    "inc sp" => 0x33,

    "dec a" => 0x3d,
    "dec b" => 0x05,
    "dec c" => 0x0d,
    "dec d" => 0x15,
    "dec e" => 0x1d,
    "dec h" => 0x25,
    "dec l" => 0x2d,
    "dec (hl)" => 0x35,
    "dec bc" => 0x0b,
    "dec de" => 0x1b,
    "dec hl" => 0x2b,
    "dec sp" => 0x3b,

    // Rotate/Shift
    "rlca" => 0x07,
    "rrca" => 0x0f,
    "rla" => 0x17,
    "rra" => 0x1f,

    // Arithmetic
    "add a,(hl)" => 0x86,
    "adc a,(hl)" => 0x8e,
    "sub (hl)" => 0x96,
    "sbc a,(hl)" => 0x9e,
    "and (hl)" => 0xa6,
    "xor (hl)" => 0xae,
    "or (hl)" => 0xb6,
    "cp (hl)" => 0xbe,

    "add a,a" => 0x87,
    "add a,b" => 0x80,
    "add a,c" => 0x81,
    "add a,d" => 0x82,
    "add a,e" => 0x83,
    "add a,h" => 0x84,
    "add a,l" => 0x85,

    "adc a,a" => 0x8f,
    "adc a,b" => 0x88,
    "adc a,c" => 0x89,
    "adc a,d" => 0x8a,
    "adc a,e" => 0x8b,
    "adc a,h" => 0x8c,
    "adc a,l" => 0x8d,

    "sub a" => 0x97,
    "sub b" => 0x90,
    "sub c" => 0x91,
    "sub d" => 0x92,
    "sub e" => 0x93,
    "sub h" => 0x94,
    "sub l" => 0x95,

    "sbc a,a" => 0x9f,
    "sbc a,b" => 0x98,
    "sbc a,c" => 0x99,
    "sbc a,d" => 0x9a,
    "sbc a,e" => 0x9b,
    "sbc a,h" => 0x9c,
    "sbc a,l" => 0x9d,

    "and a" => 0xa7,
    "and b" => 0xa0,
    "and c" => 0xa1,
    "and d" => 0xa2,
    "and e" => 0xa3,
    "and h" => 0xa4,
    "and l" => 0xa5,

    "xor a" => 0xaf,
    "xor b" => 0xa8,
    "xor c" => 0xa9,
    "xor d" => 0xaa,
    "xor e" => 0xab,
    "xor h" => 0xac,
    "xor l" => 0xad,

    "or a" => 0xb7,
    "or b" => 0xb0,
    "or c" => 0xb1,
    "or d" => 0xb2,
    "or e" => 0xb3,
    "or h" => 0xb4,
    "or l" => 0xb5,

    "cp a" => 0xbf,
    "cp b" => 0xb8,
    "cp c" => 0xb9,
    "cp d" => 0xba,
    "cp e" => 0xbb,
    "cp h" => 0xbc,
    "cp l" => 0xbd,

    // 16-bit arithmetic
    "add hl,bc" => 0x09,
    "add hl,de" => 0x19,
    "add hl,hl" => 0x29,
    "add hl,sp" => 0x39,

    // Exchange
    "ex de,hl" => 0xeb,
    "ex af,af'" => 0x08,
    "exx" => 0xd9,
    "ex (sp),hl" => 0xe3,
    // ex (sp),ix and ex (sp),iy handled in index.rs

    // CPU control
    "di" => 0xf3,
    "ei" => 0xfb,
    "ccf" => 0x3f,
    "scf" => 0x37,
    "cpl" => 0x2f,
    "daa" => 0x27,

    // IX/IY operations are handled in index.rs, not here

    // Block transfer instructions (ED prefix)
    "ldi" => 0xeda0,
    "ldir" => 0xedb0,
    "ldd" => 0xeda8,
    "lddr" => 0xedb8,
    "cpi" => 0xeda1,
    "cpir" => 0xedb1,
    "cpd" => 0xeda9,
    "cpdr" => 0xedb9,

    // More ED prefix instructions
    "neg" => 0xed44,
    "im 0" => 0xed46,
    "im 1" => 0xed56,
    "im 2" => 0xed5e,
};

// 8-bit register load immediate opcodes
pub const REG_LOAD_IMMEDIATE: phf::Map<&'static str, u8> = phf_map! {
    "b" => 0x06,
    "c" => 0x0e,
    "d" => 0x16,
    "e" => 0x1e,
    "h" => 0x26,
    "l" => 0x2e,
    "a" => 0x3e,
    "(hl)" => 0x36,
};

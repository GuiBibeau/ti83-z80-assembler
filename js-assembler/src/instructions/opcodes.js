/**
 * Z80 Instruction opcodes
 */

export const opcodes = {
  // 8-bit loads
  "ld a,b": 0x78,
  "ld a,c": 0x79,
  "ld a,d": 0x7a,
  "ld a,e": 0x7b,
  "ld a,h": 0x7c,
  "ld a,l": 0x7d,
  "ld a,(hl)": 0x7e,
  "ld a,a": 0x7f,
  "ld b,a": 0x47,
  "ld c,a": 0x4f,
  "ld d,a": 0x57,
  "ld e,a": 0x5f,
  "ld h,a": 0x67,
  "ld l,a": 0x6f,
  "ld (hl),a": 0x77,
  "ld b,b": 0x40,
  "ld b,c": 0x41,
  "ld b,d": 0x42,
  "ld b,e": 0x43,
  "ld b,h": 0x44,
  "ld b,l": 0x45,
  "ld b,(hl)": 0x46,
  "ld c,b": 0x48,
  "ld c,c": 0x49,
  "ld c,d": 0x4a,
  "ld c,e": 0x4b,
  "ld c,h": 0x4c,
  "ld c,l": 0x4d,
  "ld c,(hl)": 0x4e,
  
  // Additional LD instructions
  "ld a,(bc)": 0x0a,
  "ld a,(de)": 0x1a,
  "ld (bc),a": 0x02,
  "ld (de),a": 0x12,

  // Basic instructions
  nop: 0x00,
  halt: 0x76,
  ret: 0xc9,
  "push af": 0xf5,
  "push bc": 0xc5,
  "push de": 0xd5,
  "push hl": 0xe5,
  "pop af": 0xf1,
  "pop bc": 0xc1,
  "pop de": 0xd1,
  "pop hl": 0xe1,
  "inc a": 0x3c,
  "inc b": 0x04,
  "inc c": 0x0c,
  "inc d": 0x14,
  "inc e": 0x1c,
  "inc h": 0x24,
  "inc l": 0x2c,
  "dec a": 0x3d,
  "dec b": 0x05,
  "dec c": 0x0d,
  "dec d": 0x15,
  "dec e": 0x1d,
  "dec h": 0x25,
  "dec l": 0x2d,
  "inc hl": 0x23,
  "inc bc": 0x03,
  "inc de": 0x13,
  "inc sp": 0x33,
  "dec hl": 0x2b,
  "dec bc": 0x0b,
  "dec de": 0x1b,
  "dec sp": 0x3b,
  "cp (hl)": 0xbe,
  "xor a": 0xaf,
  "or a": 0xb7,
  rlca: 0x07,
  rrca: 0x0f,
  rla: 0x17,
  rra: 0x1f,
  daa: 0x27,
  cpl: 0x2f,
  scf: 0x37,
  ccf: 0x3f,
  di: 0xf3,
  ei: 0xfb,
  
  // Arithmetic/Logic
  "add a,(hl)": 0x86,
  "adc a,(hl)": 0x8e,
  "sub (hl)": 0x96,
  "sbc a,(hl)": 0x9e,
  "and (hl)": 0xa6,
  "xor (hl)": 0xae,
  "or (hl)": 0xb6,
  
  // 16-bit arithmetic
  "add hl,bc": 0x09,
  "add hl,de": 0x19,
  "add hl,hl": 0x29,
  "add hl,sp": 0x39,
  
  // Exchange
  "ex de,hl": 0xeb,
  "ex af,af'": 0x08,
  exx: 0xd9,
  
  // Conditional returns
  "ret z": 0xc8,
  "ret nz": 0xc0,
  "ret c": 0xd8,
  "ret nc": 0xd0,
  "ret pe": 0xe8,
  "ret po": 0xe0,
  "ret p": 0xf0,
  "ret m": 0xf8,
};

export default opcodes;